@using Tuto.DataLayer.Enums
@model IEnumerable<Tuto.Web.ViewModels.TutorHelpRequestListEntryViewModel>

@{
    ViewBag.Title = "Demandes de tutorat assignées";
}

<!-- Page header -->
<div class="page-header">
    <h1><span class="awe-tasks"></span>@Resources.Resources.ViewHelpRequestTutorListHeader</h1>
</div>
<!-- /Page header -->
<div class="page-container">
    <div class="row-fluid">
        <div class="control-group" align="right">
            <label class="control-label" for="select">@Resources.Resources.ViewFilter</label>
            <div class="controls">
                <select id="select" style="width:120px">
                    <option></option>
                    <option>À confirmer</option>
                    <option>Confirmé</option>
                    <option>Bilan à faire</option>
                    <option>Terminé</option>
                </select>
                <button class="btn" type="button">Go!</button>
            </div>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>@Resources.Resources.DisplayHelpRequestState</th>
                    <th>@Html.DisplayNameFor(x => x.createdTime)</th>
                    <th>@Html.DisplayNameFor(x => x.expectedDate)</th>
                    <th>@Html.DisplayNameFor(x => x.course)</th>
                    <th>@Html.DisplayNameFor(x => x.place)</th>
                    <th>@Html.DisplayNameFor(x => x.helpedFullname)</th>
                    <th>@Resources.Resources.ListEntryActions</th>
                    <th>@Html.DisplayNameFor(x => x.reportIsEmpty)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr @(item.tutorHasConfirmed ? @Html.Raw("class= \"green\"") : @Html.Raw("class= \"red\""))>
                    
                        <td>@item.getStateString()</td>
                        <td>@Html.DisplayFor(modelItem => item.createdTime)</td>
                        <td>@Html.DisplayFor(modelItem => item.expectedDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.course)</td>
                        <td>@Html.DisplayFor(modelItem => item.place)</td>
                        <td>@Html.DisplayFor(modelItem => item.helpedFullname)</td>
                        <td class="toolbar" style="text-align: center;">
                            <div class="btn-group">
                                @if (!item.tutorHasConfirmed)
                                {
                                    <button class="btn btn-primary" onclick="location.href='@Url.Action("confirm", "HelpRequest", new { id=item.id })'">Confirmer</button>
                                    <button class="btn" onclick="location.href='@Url.Action("refuse", "HelpRequest", new { id=item.id })'">Refuser</button>
                                }
                                <button class="btn" onclick="location.href='@Url.Action("details", "HelpRequest", new { id=item.id })'">Détails</button>
                            </div>
                        </td>
                        <td class="toolbar" style="text-align: center;">
                            @if (item.getStateString().Equals(Resources.Resources.StateStringFinished))
                            {
                                @(item.reportIsEmpty ? Html.ActionLink(@Resources.Resources.HelpRequestRepportFillOut, "report", new {id = item.id}) : Html.Raw(@Resources.Resources.HelpRequestRepportFilledOut))
                            }
                            else
                            {
                                @Html.Raw(@Resources.Resources.HelpRequestRepportNotAvailable)
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>